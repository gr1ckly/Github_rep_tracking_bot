CREATE TABLE IF NOT EXISTS CHAT(
    CHAT_ID BIGINT PRIMARY KEY NOT NULL,
    TYPE VARCHAR(256)
);

CREATE TABLE IF NOT EXISTS REPO
(
    ID                SERIAL PRIMARY KEY NOT NULL,
    NAME              VARCHAR(256)       NOT NULL,
    OWNER             VARCHAR(256)       NOT NULL,
    LINK              VARCHAR(512)       NOT NULL,
    LAST_COMMIT       TIMESTAMP,
    LAST_ISSUE        TIMESTAMP,
    LAST_PULL_REQUEST TIMESTAMP
);

CREATE TABLE IF NOT EXISTS CHAT_REPO_RECORD
(
    ID     SERIAL PRIMARY KEY NOT NULL,
    CHAT   INTEGER REFERENCES CHAT (CHAT_ID) ON DELETE CASCADE,
    REPO   INTEGER REFERENCES REPO (ID) ON DELETE CASCADE,
    TAGS   VARCHAR(256)[],
    EVENTS VARCHAR(256)[]
);

CREATE INDEX IF NOT EXISTS CHAT_ID_INDEX ON CHAT USING HASH(CHAT_ID);

CREATE INDEX IF NOT EXISTS REPO_ID_INDEX ON REPO USING HASH(ID);

CREATE INDEX IF NOT EXISTS REPO_OWNER_NAME_INDEX ON REPO(NAME, OWNER);

CREATE INDEX IF NOT EXISTS CHAT_ID_REPO_INDEX ON CHAT_REPO_RECORD(CHAT);

CREATE INDEX IF NOT EXISTS CHAT_ID_REPO_INDEX ON CHAT_REPO_RECORD USING HASH(ID);

CREATE OR REPLACE FUNCTION CHECK_AND_DELETE_REPO()
    RETURNS TRIGGER AS $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM CHAT_REPO_RECORD WHERE REPO = OLD.REPO
    ) THEN
        DELETE FROM REPO WHERE id = OLD.REPO;
    END IF;
    RETURN OLD;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER DEL_CHAT_REPO_RECORD_TRIGGER
    AFTER DELETE ON CHAT_REPO_RECORD
    FOR EACH ROW
EXECUTE FUNCTION CHECK_AND_DELETE_REPO();